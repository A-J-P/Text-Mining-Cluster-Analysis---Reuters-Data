==
library

library(XML)

library(SnowballC)

library(tm)

library(fpc)

library(ggplot2)

library(stringr)

library(clValid)

library(plyr)

==
Cluster Analysis Function

get.cluster.list = function(k.list, clus.fun) {

lapply(k.list,

function(k) { cat('.'); clus.fun(k) })

}

get.cluster.measures = function(cl.list, meas.fun) {

lapply(cl.list,

function(cl) { cat('.'); meas.fun(cl)})

}

get.one.measure = function(meas.list, meas.name) {

sapply(meas.list, function(x) x[[meas.name]])

}

TopWordsForCluster = function (dtm, clusters, i) {

dtm_names = colnames(dtm)

row_count = sum(clusters==i)

dtm_csums =

apply(matrix(dtm[clusters==i,], nrow=row_count),

dtm_index = sort(dtm_csums, decreasing=TRUE, index.return=TRUE)$ix

data.frame(word=as.character(dtm_names[dtm_index][1:10]),

}

checkClusterTopic =

function(cgrp.size)

do.call('cbind',

2,

mean)

metric=dtm_csums[dtm_index][1:10],

stringsAsFactors=FALSE)

lapply(1:cgrp.size,

function(n) {

TopWordsForCluster(dtm,

kmeans.clusters[[cgrp.size]],

n)}))

===
makeCorpus = function(reutxmlfile) {

reutersLines = readLines(reutxmlfile) # reutersLines[1:20]

3

reutersString = paste(reutersLines, collapse=' ')

reutersTree = xmlParse(reutersString, asText=TRUE)

reutersList = xmlToList(reutersTree)

getTextBody = function(n) { reutersList[n]$REUTERS$TEXT$BODY }

getTextBody(2)

reutersTextBody = sapply(1:length(reutersList), getTextBody)

reutersCorpus = Corpus(VectorSource(reutersTextBody))

reutersCorpus2 = tm_map(reutersCorpus, stemDocument)

reutersCorpus3 = tm_map(reutersCorpus2, content_transformer(tolower))

reutersCorpus4 = tm_map(reutersCorpus3,

content_transformer(

function(str)

str_replace_all(str,

"[[:punct:]]",

" ")))

reutersCorpus5 = tm_map(reutersCorpus4, removeNumbers)

additional.stopwords = c('reuter')

reutersCorpus6 = tm_map(reutersCorpus5,

removeWords,

c(stopwords("SMART"),

additional.stopwords))

reutersCorpus7 = tm_map(reutersCorpus6, stripWhitespace)

reutersCorpusF = reutersCorpus7

return(reutersCorpusF)

}

==
read first data set 

setwd("M:/r/reut2")

reutersCorpusF = makeCorpus('reut2-003.xml')

==
the frist measurement-weightTf
dt = DocumentTermMatrix(reutersCorpusF,

control=list(weighting=weightTf))

dtm = as.matrix(dt)

dtm.dist = dist(dtm)

==
data set exploration

str(dt)
findFreqTerms(dt, lowfreq=200)

==
create cluster

cluster.group.sizes = 2:5

kmeans.clusters = get.cluster.list(cluster.group.sizes,

function(k) { kmeans(dtm,k)$cluster })

names(kmeans.clusters) = cluster.group.sizes

kmeans.cluster.stats = get.cluster.measures(kmeans.clusters,

function(cluster)

cluster.stats(d=dtm.dist,

cl=cluster))

==
output 

get.one.measure(kmeans.cluster.stats, 'dunn')
get.one.measure(kmeans.cluster.stats, 'dunn2')
get.one.measure(kmeans.cluster.stats, 'avg.silwidth')
get.one.measure(kmeans.cluster.stats, 'wb.ratio')
data.frame(

dunn=get.one.measure(kmeans.cluster.stats, 'dunn'),

dunn2=get.one.measure(kmeans.cluster.stats, 'dunn2'),

avg.silwidth=get.one.measure(kmeans.cluster.stats, 'avg.silwidth'),

wb.ratio=get.one.measure(kmeans.cluster.stats, 'wb.ratio')

==

checkClusterTopic('2')
get.one.measure(kmeans.cluster.stats, 'cluster.size')['2']

rownames(dtm) = 1:nrow(dtm)

methods.vec = c("hierarchical","kmeans","pam")

clValid.result = clValid(dtm[1:500,],

2:5,

clMethods=methods.vec,

validation="internal")

summary(clValid.result)

==
The Second Measurement-weightBin

dt = DocumentTermMatrix(reutersCorpusF,control=list(weighting=weightBin))

dtm = as.matrix(dt)

dtm.dist = dist(dtm)

==
create cluster

cluster.group.sizes = 2:5

kmeans.clusters = get.cluster.list(cluster.group.sizes,

function(k) { kmeans(dtm,k)$cluster })

names(kmeans.clusters) = cluster.group.sizes

kmeans.cluster.stats = get.cluster.measures(kmeans.clusters,

function(cluster)

cluster.stats(d=dtm.dist,

cl=cluster))

==
output 

get.one.measure(kmeans.cluster.stats, 'dunn')
get.one.measure(kmeans.cluster.stats, 'dunn2')
get.one.measure(kmeans.cluster.stats, 'avg.silwidth')
get.one.measure(kmeans.cluster.stats, 'wb.ratio')
data.frame(

dunn=get.one.measure(kmeans.cluster.stats, 'dunn'),

dunn2=get.one.measure(kmeans.cluster.stats, 'dunn2'),

avg.silwidth=get.one.measure(kmeans.cluster.stats, 'avg.silwidth'),

wb.ratio=get.one.measure(kmeans.cluster.stats, 'wb.ratio')

==

checkClusterTopic('2')
get.one.measure(kmeans.cluster.stats, 'cluster.size')['2']

rownames(dtm) = 1:nrow(dtm)

methods.vec = c("hierarchical","kmeans","pam")

clValid.result = clValid(dtm[1:500,],

2:5,

clMethods=methods.vec,

validation="internal")

summary(clValid.result)

==
The Third Measurement-weightTfIdf

dt = DocumentTermMatrix(reutersCorpusF,

control=list(weighting=weightTfIdf))

dtm = as.matrix(dt)

dtm.dist = dist(dtm)

==
create cluster

cluster.group.sizes = 2:5

kmeans.clusters = get.cluster.list(cluster.group.sizes,

function(k) { kmeans(dtm,k)$cluster })

names(kmeans.clusters) = cluster.group.sizes

kmeans.cluster.stats = get.cluster.measures(kmeans.clusters,

function(cluster)

cluster.stats(d=dtm.dist,

cl=cluster))

==
output 

get.one.measure(kmeans.cluster.stats, 'dunn')
get.one.measure(kmeans.cluster.stats, 'dunn2')
get.one.measure(kmeans.cluster.stats, 'avg.silwidth')
get.one.measure(kmeans.cluster.stats, 'wb.ratio')
data.frame(

dunn=get.one.measure(kmeans.cluster.stats, 'dunn'),

dunn2=get.one.measure(kmeans.cluster.stats, 'dunn2'),

avg.silwidth=get.one.measure(kmeans.cluster.stats, 'avg.silwidth'),

wb.ratio=get.one.measure(kmeans.cluster.stats, 'wb.ratio')

==

checkClusterTopic('2')
get.one.measure(kmeans.cluster.stats, 'cluster.size')['2']

rownames(dtm) = 1:nrow(dtm)

methods.vec = c("hierarchical","kmeans","pam")

clValid.result = clValid(dtm[1:500,],

2:5,

clMethods=methods.vec,

validation="internal")

summary(clValid.result)

==



